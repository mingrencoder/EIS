package com.jk.eis.commen.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "DEPOSITION".
*/
public class DepositionDao extends AbstractDao<Deposition, Long> {

    public static final String TABLENAME = "DEPOSITION";

    /**
     * Properties of entity Deposition.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Field_id = new Property(1, Long.class, "field_id", false, "FIELD_ID");
        public final static Property Segment_id = new Property(2, Long.class, "segment_id", false, "SEGMENT_ID");
        public final static Property Seg_count = new Property(3, Integer.class, "seg_count", false, "SEG_COUNT");
        public final static Property Begin_date = new Property(4, Integer.class, "begin_date", false, "BEGIN_DATE");
        public final static Property End_date = new Property(5, Integer.class, "end_date", false, "END_DATE");
    };


    public DepositionDao(DaoConfig config) {
        super(config);
    }
    
    public DepositionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEPOSITION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"FIELD_ID\" INTEGER," + // 1: field_id
                "\"SEGMENT_ID\" INTEGER," + // 2: segment_id
                "\"SEG_COUNT\" INTEGER," + // 3: seg_count
                "\"BEGIN_DATE\" INTEGER," + // 4: begin_date
                "\"END_DATE\" INTEGER);"); // 5: end_date
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEPOSITION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Deposition entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long field_id = entity.getField_id();
        if (field_id != null) {
            stmt.bindLong(2, field_id);
        }
 
        Long segment_id = entity.getSegment_id();
        if (segment_id != null) {
            stmt.bindLong(3, segment_id);
        }
 
        Integer seg_count = entity.getSeg_count();
        if (seg_count != null) {
            stmt.bindLong(4, seg_count);
        }
 
        Integer begin_date = entity.getBegin_date();
        if (begin_date != null) {
            stmt.bindLong(5, begin_date);
        }
 
        Integer end_date = entity.getEnd_date();
        if (end_date != null) {
            stmt.bindLong(6, end_date);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Deposition readEntity(Cursor cursor, int offset) {
        Deposition entity = new Deposition( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // field_id
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // segment_id
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // seg_count
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // begin_date
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5) // end_date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Deposition entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setField_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setSegment_id(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setSeg_count(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setBegin_date(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setEnd_date(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Deposition entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Deposition entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
