package com.jk.eis.commen.greendao;


import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table "USER".
 */
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Username = new Property(1, String.class, "username", false, "USERNAME");
        public final static Property Password = new Property(2, String.class, "password", false, "PASSWORD");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Email = new Property(4, String.class, "email", false, "EMAIL");
        public final static Property Created_date = new Property(5, int.class, "created_date", false, "CREATED_DATE");
        public final static Property Updated_date = new Property(6, Integer.class, "updated_date", false, "UPDATED_DATE");
        public final static Property Picpath = new Property(7, String.class, "picpath", false, "PICPATH");
        public final static Property Activated = new Property(8, Integer.class, "activated", false, "ACTIVATED");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }

    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USERNAME\" TEXT NOT NULL ," + // 1: username
                "\"PASSWORD\" TEXT NOT NULL ," + // 2: password
                "\"NAME\" TEXT NOT NULL ," + // 3: name
                "\"EMAIL\" TEXT," + // 4: email
                "\"CREATED_DATE\" INTEGER NOT NULL ," + // 5: created_date
                "\"UPDATED_DATE\" INTEGER," + // 6: updated_date
                "\"PICPATH\" TEXT," + // 7: picpath
                "\"ACTIVATED\" INTEGER);"); // 8: activated
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUsername());
        stmt.bindString(3, entity.getPassword());
        stmt.bindString(4, entity.getName());

        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(5, email);
        }
        stmt.bindLong(6, entity.getCreated_date());

        Integer updated_date = entity.getUpdated_date();
        if (updated_date != null) {
            stmt.bindLong(7, updated_date);
        }

        String picpath = entity.getPicpath();
        if (picpath != null) {
            stmt.bindString(8, picpath);
        }

        Integer activated = entity.getActivated();
        if (activated != null) {
            stmt.bindLong(9, activated);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.getString(offset + 1), // username
                cursor.getString(offset + 2), // password
                cursor.getString(offset + 3), // name
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // email
                cursor.getInt(offset + 5), // created_date
                cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // updated_date
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // picpath
                cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // activated
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUsername(cursor.getString(offset + 1));
        entity.setPassword(cursor.getString(offset + 2));
        entity.setName(cursor.getString(offset + 3));
        entity.setEmail(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreated_date(cursor.getInt(offset + 5));
        entity.setUpdated_date(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setPicpath(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setActivated(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
    }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}